---
etcd_hosts: "{% set r = [] %}{% for i in groups.etcd %}{{ r.append(hostvars[i].ansible_default_ipv4.address) }}{% endfor %}{{ r }}"
prometheus_stack_values:
  alertmanager:
    enabled: true
    ingress:
      enabled: false
      ingressClassName: "{{ k8s_prometheus_stack__ingress_class }}"
      hosts:
        - "alertmanager.{{ k8s_prometheus_stack__ingress_host_prefix }}"
      annotations: "{{ k8s_prometheus_stack__ingress_annotations }}"
      paths:
        - /
      pathType: Prefix
      tls:
        - secretName: k8s-prometheus-alertmanager
          hosts:
            - "alertmanager.{{ k8s_prometheus_stack__ingress_host_prefix }}"
  grafana:
    enabled: true
    image:
      repository: docker.io/grafana/grafana
    defaultDashboardsEnabled: true
    defaultDashboardsTimezone: "{{ k8s_prometheus_stack__timezone }}"
    adminPassword: "{{ k8s_prometheus_stack__grafana_password }}"
    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: false
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      auth.anonymous:
        enabled: true
        org_name: Main Org.
        org_role: Viewer
        hide_version: true
    persistence:
      type: pvc
      enabled: true
      storageClassName: "{{ k8s_prometheus_stack__storage_class }}"
      accessModes:
        - ReadWriteOnce
      size: "{{ k8s_prometheus_stack__grafana_pvc_size }}"
    ingress:
      enabled: true
      ingressClassName: "{{ k8s_prometheus_stack__ingress_class }}"
      annotations: "{{ k8s_prometheus_stack__ingress_annotations }}"
      hosts:
        - "grafana.{{ k8s_prometheus_stack__ingress_host_prefix }}"
      path: /
      tls:
        - secretName: k8s-prometheus-grafana
          hosts:
            - "grafana.{{ k8s_prometheus_stack__ingress_host_prefix }}"
  kubeEtcd:
    enabled: true
    endpoints: "{{ etcd_hosts }}"
  nodeExporter:
    enabled: true
  prometheus:
    enabled: true
    prometheusSpec:
      retention: "{{ k8s_prometheus_stack__retention_days }}"
      walCompression: true
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "{{ k8s_prometheus_stack__storage_class }}"
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ k8s_prometheus_stack__retention_size }}"
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: 250m
          memory: 512Mi
    ingress:
      enabled: false
      ingressClassName: "{{ k8s_prometheus_stack__ingress_class }}"
      annotations: "{{ k8s_prometheus_stack__ingress_annotations }}"
      hosts:
        - "prometheus.{{ k8s_prometheus_stack__ingress_host_prefix }}"
      paths:
        - /
      tls:
        - secretName: k8s-prometheus-prometheus
          hosts:
            - "prometheus.{{ k8s_prometheus_stack__ingress_host_prefix }}"
